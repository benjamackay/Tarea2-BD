generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model correos {
  id_correo                               Int                 @id @default(autoincrement())
  remitente                               String              @db.VarChar(255)
  destinatario                            String              @db.VarChar(255)
  asunto                                  String?             @db.VarChar(255)
  cuerpo                                  String
  fecha_envio                             DateTime?           @default(now()) @db.Timestamp(6)
  leido                                   Boolean?            @default(false)
  es_favorito                             Boolean?            @default(false)
  usuarios_correos_destinatarioTousuarios usuarios            @relation("correos_destinatarioTousuarios", fields: [destinatario], references: [direccion_correo], onDelete: NoAction, onUpdate: NoAction)
  usuarios_correos_remitenteTousuarios    usuarios            @relation("correos_remitenteTousuarios", fields: [remitente], references: [direccion_correo], onDelete: NoAction, onUpdate: NoAction)
  correos_favoritos                       correos_favoritos[]
}

model usuarios {
  id_usuario                                                         Int                   @id @default(autoincrement())
  descripcion                                                        String?               @db.VarChar(255)
  fecha_creacion                                                     DateTime              @default(now()) @db.Timestamp(6)
  nombre                                                             String                @db.VarChar(35)
  direccion_correo                                                   String                @unique @db.VarChar(255)
  contrase_a                                                         String                @map("contrase√±a")
  correos_correos_destinatarioTousuarios                             correos[]             @relation("correos_destinatarioTousuarios")
  correos_correos_remitenteTousuarios                                correos[]             @relation("correos_remitenteTousuarios")
  correos_favoritos                                                  correos_favoritos[]
  usuarios_bloqueados_usuarios_bloqueados_correo_bloqueadoTousuarios usuarios_bloqueados[] @relation("usuarios_bloqueados_correo_bloqueadoTousuarios")
  usuarios_bloqueados_usuarios_bloqueados_correoTousuarios           usuarios_bloqueados[] @relation("usuarios_bloqueados_correoTousuarios")
}

model correos_favoritos {
  id_correo_favorito Int       @id @default(autoincrement())
  direccion_correo   String    @db.VarChar(255)
  id_correo          Int
  clave              String
  fecha_anadido      DateTime? @default(now()) @db.Timestamp(6)
  usuarios           usuarios  @relation(fields: [direccion_correo], references: [direccion_correo], onDelete: NoAction, onUpdate: NoAction)
  correos            correos   @relation(fields: [id_correo], references: [id_correo], onDelete: NoAction, onUpdate: NoAction)
}

model usuarios_bloqueados {
  id_bloqueado                                            Int       @id @default(autoincrement())
  correo                                                  String    @db.VarChar(255)
  correo_bloqueado                                        String    @db.VarChar(255)
  fecha_bloqueo                                           DateTime? @default(now()) @db.Timestamp(6)
  clave                                                   String
  usuarios_usuarios_bloqueados_correo_bloqueadoTousuarios usuarios  @relation("usuarios_bloqueados_correo_bloqueadoTousuarios", fields: [correo_bloqueado], references: [direccion_correo], onDelete: NoAction, onUpdate: NoAction)
  usuarios_usuarios_bloqueados_correoTousuarios           usuarios  @relation("usuarios_bloqueados_correoTousuarios", fields: [correo], references: [direccion_correo], onDelete: NoAction, onUpdate: NoAction)
}
